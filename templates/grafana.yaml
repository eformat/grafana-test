{{- if not .Values.operator }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-proxy-{{ .Release.Name }}-{{ .Release.Namespace }}
rules:
  - verbs:
      - create
    apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
  - verbs:
      - create
    apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-proxy-{{ .Release.Name }}-{{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  name: grafana-proxy-{{ .Release.Name }}-{{ .Release.Namespace }}
  kind: ClusterRole
subjects:
  - kind: ServiceAccount
    name: grafana-sa
    namespace: {{ .Release.Namespace }}
{{- if .Values.thanosClusterScoped }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-application-monitoring-{{ .Release.Name }}-{{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-monitoring-view
subjects:
- kind: ServiceAccount
  name: grafana-sa
  namespace: {{ .Release.Namespace }}
{{- end }}
{{- if not .Values.thanosClusterScoped }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-metrics-{{ .Release.Name }}-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-view-{{ .Release.Name }}-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-metrics-{{ .Release.Name }}-{{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: grafana-sa
  namespace: {{ .Release.Namespace }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    config.openshift.io/inject-trusted-cabundle: "true"
  name: ocp-injected-certs
---
apiVersion: v1
data:
  session_secret: {{ (randAlphaNum 10) | b64enc }}
kind: Secret
metadata:
  name: grafana-proxy
type: Opaque
---
apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
  annotations:
    {{- if not .Values.ignoreHelmHooks }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "15"
    {{- end }}
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  labels:
    dashboards: "grafana"
spec:
  serviceAccount:
    metadata:
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana-route"}}'
  route:
    spec:
      port:
        targetPort: https
      tls:
        termination: reencrypt
      to:
        kind: Service
        name: grafana-service
        weight: 100
      wildcardPolicy: None
  persistentVolumeClaim:
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  deployment:
    spec:
      template:
        spec:
          volumes:
          - name: grafana-data
            persistentVolumeClaim:
              claimName: grafana-pvc
          - name: grafana-tls
            secret:
              secretName: grafana-tls
          - name: grafana-proxy
            secret:
              secretName: grafana-proxy
          - name: ocp-injected-certs
            configMap:
              name: ocp-injected-certs
          containers:
            - args:
                - '-provider=openshift'
                - '-pass-basic-auth=false'
                - '-https-address=:9091'
                - '-http-address='
                - '-email-domain=*'
                - '-upstream=http://localhost:3000'
                # Only allow users with access to view the grafana route
                - '-openshift-sar={"namespace": "{{ .Release.Namespace }}", "resource": "routes", "name": "grafana-route", "verb": "get"}'
                - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
                - '-tls-cert=/etc/tls/private/tls.crt'
                - '-tls-key=/etc/tls/private/tls.key'
                - '-client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token'
                - '-cookie-secret-file=/etc/proxy/secrets/session_secret'
                - '-openshift-service-account=grafana-sa'
                - '-openshift-ca=/etc/pki/tls/cert.pem'
                - '-openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
                - '-openshift-ca=/etc/proxy/certs/ca-bundle.crt'
                - '-skip-auth-regex=^/metrics'
              image: 'quay.io/openshift/origin-oauth-proxy'
              name: grafana-proxy
              ports:
                - containerPort: 9091
                  name: https
              resources: { }
              volumeMounts:
                - mountPath: /etc/tls/private
                  name: grafana-tls
                  readOnly: false
                - mountPath: /etc/proxy/secrets
                  name: grafana-proxy
                  readOnly: false
                - mountPath: /etc/proxy/certs
                  name: ocp-injected-certs
                  readOnly: false
  service:
    metadata:
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: grafana-tls
    spec:
      ports:
        - name: https
          port: 9091
          protocol: TCP
          targetPort: https
  client:
    preferIngress: false
  config:
    log:
      mode: "console"
    auth.anonymous:
      enabled: "True"
    auth:
      disable_login_form: "False"
      disable_signout_menu: "True"
    auth.basic:
      enabled: "True"
    auth.proxy:
      enabled: "True"
      enable_login_token: "True"
      header_property: "username"
      header_name: "X-Forwarded-User"
    users:
      auto_assign_org_role: "Admin"
---
apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDatasource
metadata:
  name: prometheus-grafanadatasource
  annotations:
    {{- if not .Values.ignoreHelmHooks }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "25"
    {{- end }}
spec:
  valuesFrom:
    - targetPath: "secureJsonData.httpHeaderValue1"
      valueFrom:
        secretKeyRef:
          name: "grafana-sa-token"
          key: "token"
  datasource:
      access: proxy
      editable: false
      isDefault: true
      jsonData:
        httpHeaderName1: 'Authorization'
        timeInterval: 5s
        tlsSkipVerify: true
{{- if not .Values.thanosClusterScoped }}
        customQueryParameters: namespace={{ .Release.Namespace }}
{{- end }}
      name: Prometheus
      secureJsonData:
        httpHeaderValue1: "Bearer ${token}"
      type: prometheus
{{- if .Values.thanosClusterScoped }}
      url: 'https://thanos-querier.openshift-monitoring.svc.cluster.local:9091'
{{- end }}
{{- if not .Values.thanosClusterScoped }}
      url: 'https://thanos-querier.openshift-monitoring.svc.cluster.local:9092'
{{- end }}
  instanceSelector:
    matchLabels:
      dashboards: grafana
---
kind: Secret
apiVersion: v1
metadata:
  name: grafana-sa-token
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: grafana-sa
    {{- if not .Values.ignoreHelmHooks }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "25"
    {{- end }}
type: kubernetes.io/service-account-token
{{- end }}
